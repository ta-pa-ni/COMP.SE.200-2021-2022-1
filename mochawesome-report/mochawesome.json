{
  "stats": {
    "suites": 28,
    "tests": 106,
    "passes": 93,
    "pending": 2,
    "failures": 11,
    "start": "2021-12-03T11:31:43.786Z",
    "end": "2021-12-03T11:31:43.827Z",
    "duration": 41,
    "testsRegistered": 106,
    "passPercent": 89.42307692307693,
    "pendingPercent": 1.8867924528301887,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6b813871-0a69-4909-84d7-09a84a6dcb1a",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "18b0fa89-b3ab-4705-96d0-2fde6d71c236",
          "title": "add",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/add.test.js",
          "file": "/test/add.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
              "title": "basic values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add a positive integer to a positive integer",
                  "fullTitle": "add basic values add a positive integer to a positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(13,6)).to.equal(19)",
                  "err": {},
                  "uuid": "39ded475-6cc6-46c2-a09c-91ba9101e610",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a negative integer to a positive integer",
                  "fullTitle": "add basic values add a negative integer to a positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(3,-2)).to.equal(1)",
                  "err": {},
                  "uuid": "1f0060a8-9fee-4c84-9555-623771d6405a",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a negative integer to a negative integer",
                  "fullTitle": "add basic values add a negative integer to a negative integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-3,-20)).to.equal(-23)",
                  "err": {},
                  "uuid": "275ebf93-6c52-4924-ba2a-97c94c56fadf",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a zero to a negative integer",
                  "fullTitle": "add basic values add a zero to a negative integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-20,0)).to.equal(-20)",
                  "err": {},
                  "uuid": "cd6a19eb-5291-4a2d-be14-7932a68f000b",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a positive integer to zero",
                  "fullTitle": "add basic values add a positive integer to zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(0,6)).to.equal(6)",
                  "err": {},
                  "uuid": "3eca4289-d1ec-4277-9cf0-6e49d90ca0cd",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add zero to negative zero",
                  "fullTitle": "add basic values add zero to negative zero",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(0,-0)).to.equal(0)",
                  "err": {},
                  "uuid": "6f46d55e-3174-4f14-a18b-5b3c5de0e32b",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a negative integer to a negative decimal number",
                  "fullTitle": "add basic values add a negative integer to a negative decimal number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-0.3,-20)).to.equal(-20.3)",
                  "err": {},
                  "uuid": "c31278c0-fb9b-4bc5-9c8e-f099adf6e2fe",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a positive decimal number to a negative integer",
                  "fullTitle": "add basic values add a positive decimal number to a negative integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-3,0.004)).to.equal(-2.996)",
                  "err": {},
                  "uuid": "ef4c9136-7e35-4dde-8df5-536ea1466788",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a positive decimal number to a negative decimal number",
                  "fullTitle": "add basic values add a positive decimal number to a negative decimal number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(-0.3,0.004)).to.equal(-0.296)",
                  "err": {},
                  "uuid": "c9e24e92-a0e6-47ba-a691-083d622550e1",
                  "parentUUID": "6d2ed1d9-e5bd-4c77-9618-7a8f66b673c3",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "39ded475-6cc6-46c2-a09c-91ba9101e610",
                "1f0060a8-9fee-4c84-9555-623771d6405a",
                "275ebf93-6c52-4924-ba2a-97c94c56fadf",
                "cd6a19eb-5291-4a2d-be14-7932a68f000b",
                "3eca4289-d1ec-4277-9cf0-6e49d90ca0cd",
                "6f46d55e-3174-4f14-a18b-5b3c5de0e32b",
                "c31278c0-fb9b-4bc5-9c8e-f099adf6e2fe",
                "ef4c9136-7e35-4dde-8df5-536ea1466788",
                "c9e24e92-a0e6-47ba-a691-083d622550e1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
              "title": "accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add -1 to max value (MAX_SAFE_INTEGER)",
                  "fullTitle": "add accepted limit values add -1 to max value (MAX_SAFE_INTEGER)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(Number.MAX_SAFE_INTEGER,-1)).to.equal(Number.MAX_SAFE_INTEGER - 1)",
                  "err": {},
                  "uuid": "55f3fece-ce6c-4bd1-bc44-583b6a8b9fca",
                  "parentUUID": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add 1 to max value -1 (MAX_SAFE_INTEGER)",
                  "fullTitle": "add accepted limit values add 1 to max value -1 (MAX_SAFE_INTEGER)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add((Number.MAX_SAFE_INTEGER-1),1)).to.equal(Number.MAX_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "c869341c-1e5b-437b-a742-c79c2622db10",
                  "parentUUID": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add 1 to min negative value (MIN_SAFE_INTEGER)",
                  "fullTitle": "add accepted limit values add 1 to min negative value (MIN_SAFE_INTEGER)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add(Number.MIN_SAFE_INTEGER,1)).to.equal(Number.MIN_SAFE_INTEGER+1)",
                  "err": {},
                  "uuid": "583631ad-4ee2-4858-b261-686ed6cd30aa",
                  "parentUUID": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add -1 to min negative value +1 (MIN_SAFE_INTEGER)",
                  "fullTitle": "add accepted limit values add -1 to min negative value +1 (MIN_SAFE_INTEGER)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add((Number.MIN_SAFE_INTEGER+1),-1)).to.equal(Number.MIN_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "87cc12c1-fdc0-4734-9d78-70ab202638ae",
                  "parentUUID": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add zero to a value closest to zero (MIN_VALUE)",
                  "fullTitle": "add accepted limit values add zero to a value closest to zero (MIN_VALUE)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(add((Number.MIN_VALUE),0)).to.equal(Number.MIN_VALUE)",
                  "err": {},
                  "uuid": "88679791-6fcb-4c6e-8f02-1a1e0606d731",
                  "parentUUID": "db25ba46-2ac2-4e40-851d-aee89d3414ad",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "55f3fece-ce6c-4bd1-bc44-583b6a8b9fca",
                "c869341c-1e5b-437b-a742-c79c2622db10",
                "583631ad-4ee2-4858-b261-686ed6cd30aa",
                "87cc12c1-fdc0-4734-9d78-70ab202638ae",
                "88679791-6fcb-4c6e-8f02-1a1e0606d731"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "7e37d2cf-d165-46c2-9c2e-412eabe7e5e5",
              "title": "not accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add +1 to max value",
                  "fullTitle": "add not accepted limit values add +1 to max value",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => add(Number.MAX_SAFE_INTEGER, 1)).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/add.test.js:75:67)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "1befca0e-1c38-411c-ab59-3a84ecd518a7",
                  "parentUUID": "7e37d2cf-d165-46c2-9c2e-412eabe7e5e5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add -1 to min negative value",
                  "fullTitle": "add not accepted limit values add -1 to min negative value",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => add(Number.MIN_SAFE_INTEGER, -1)).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/add.test.js:78:68)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "32af592b-4eb2-428b-9148-152d075bcbee",
                  "parentUUID": "7e37d2cf-d165-46c2-9c2e-412eabe7e5e5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "1befca0e-1c38-411c-ab59-3a84ecd518a7",
                "32af592b-4eb2-428b-9148-152d075bcbee"
              ],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
              "title": "not accepted values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/add.test.js",
              "file": "/test/add.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "add a string to a positive integer",
                  "fullTitle": "add not accepted values add a string to a positive integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => add(100, \"sata\")).to.throw(TypeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/add.test.js:84:52)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "bee7ca93-0129-4b5b-93ba-bd033d07bdc7",
                  "parentUUID": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a negative integer to an array",
                  "fullTitle": "add not accepted values add a negative integer to an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => add([], -100)).to.throw(TypeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/add.test.js:87:49)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "ef33dd1d-8d32-476b-ad64-3083972da87b",
                  "parentUUID": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "add a char to an array",
                  "fullTitle": "add not accepted values add a char to an array",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => add([], 'A')).to.throw(TypeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/add.test.js:90:48)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "00053f05-d68c-414a-ae4e-68de2d4a7c41",
                  "parentUUID": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "no parameters",
                  "fullTitle": "add not accepted values no parameters",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "5de31863-72fa-43b1-ab4f-798461b6134d",
                  "parentUUID": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "missing second parameter",
                  "fullTitle": "add not accepted values missing second parameter",
                  "timedOut": false,
                  "duration": 0,
                  "state": "pending",
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": true,
                  "context": null,
                  "code": "",
                  "err": {},
                  "uuid": "9e5f6fd3-ab7a-4089-942c-edaa4fffa1ee",
                  "parentUUID": "ec9376ec-353d-4dcb-bde8-9c52d0e3d848",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "bee7ca93-0129-4b5b-93ba-bd033d07bdc7",
                "ef33dd1d-8d32-476b-ad64-3083972da87b",
                "00053f05-d68c-414a-ae4e-68de2d4a7c41"
              ],
              "pending": [
                "5de31863-72fa-43b1-ab4f-798461b6134d",
                "9e5f6fd3-ab7a-4089-942c-edaa4fffa1ee"
              ],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "f8775f87-457c-458c-8e18-33eab741bafa",
          "title": "capitalize different string parameters",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "to capitalize lowercase string",
              "fullTitle": "capitalize different string parameters to capitalize lowercase string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('lowercase')).to.equal('Lowercase')",
              "err": {},
              "uuid": "52229d1c-ce51-4f45-9a1f-c6cb6edd80d8",
              "parentUUID": "f8775f87-457c-458c-8e18-33eab741bafa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "to capitalize uppercase string",
              "fullTitle": "capitalize different string parameters to capitalize uppercase string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize('UPPERCASE')).to.equal('Uppercase')",
              "err": {},
              "uuid": "614b02b0-06f1-4918-96ae-81c68955c128",
              "parentUUID": "f8775f87-457c-458c-8e18-33eab741bafa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "52229d1c-ce51-4f45-9a1f-c6cb6edd80d8",
            "614b02b0-06f1-4918-96ae-81c68955c128"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8e65641-582a-4597-a289-d82376592177",
          "title": "capitalize different non-string parameters",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/capitalize.test.js",
          "file": "/test/capitalize.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "to return number as a string",
              "fullTitle": "capitalize different non-string parameters to return number as a string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(123)).to.equal('123')",
              "err": {},
              "uuid": "e8822906-9695-40c1-9a87-268aa8515a52",
              "parentUUID": "d8e65641-582a-4597-a289-d82376592177",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "to return boolean as capitalized string",
              "fullTitle": "capitalize different non-string parameters to return boolean as capitalized string",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(capitalize(true)).to.equal('True')",
              "err": {},
              "uuid": "84193329-c628-44e6-8b36-d71a7aba591a",
              "parentUUID": "d8e65641-582a-4597-a289-d82376592177",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e8822906-9695-40c1-9a87-268aa8515a52",
            "84193329-c628-44e6-8b36-d71a7aba591a"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d4289c13-544f-4988-b3c1-8845d6e79971",
          "title": "ceil",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/ceil.test.js",
          "file": "/test/ceil.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "take a ceil function out of a number 7 with -1 precision",
              "fullTitle": "ceil take a ceil function out of a number 7 with -1 precision",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(ceil(7,-1)).to.equal(10)",
              "err": {},
              "uuid": "adc994cb-0312-48a9-a20a-66cda33ccff0",
              "parentUUID": "d4289c13-544f-4988-b3c1-8845d6e79971",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "adc994cb-0312-48a9-a20a-66cda33ccff0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5fff9bce-c9c8-46f9-862f-90d93ca72e30",
          "title": "defaultTo",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/defaultTo.test.js",
          "file": "/test/defaultTo.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "return default value when given undefined",
              "fullTitle": "defaultTo return default value when given undefined",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(defaultTo(undefined, 10)).to.equal(10)",
              "err": {},
              "uuid": "c063259a-7e96-46ec-8d68-329f9aa8ae0e",
              "parentUUID": "5fff9bce-c9c8-46f9-862f-90d93ca72e30",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c063259a-7e96-46ec-8d68-329f9aa8ae0e"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "73d0dede-c899-4f92-b102-72b6c2c618d0",
          "title": "filter",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/filter.test.js",
          "file": "/test/filter.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "return an array that contains numbers greater than two",
              "fullTitle": "filter return an array that contains numbers greater than two",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(filter([1,2,3], (item) => {return item > 2})).to.deep.equal([3])",
              "err": {},
              "uuid": "b0802ce7-a932-4bba-a67b-c42034620f26",
              "parentUUID": "73d0dede-c899-4f92-b102-72b6c2c618d0",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b0802ce7-a932-4bba-a67b-c42034620f26"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "90ca7d43-c5b7-44ce-8f66-b92fc784d80d",
          "title": "isDate",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/isDate.test.js",
          "file": "/test/isDate.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "8b5fba32-2e86-4a27-97c4-3017c9937883",
              "title": "date objects",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check that new Date-object is a valid date",
                  "fullTitle": "isDate date objects check that new Date-object is a valid date",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(new Date)).to.equal(true)",
                  "err": {},
                  "uuid": "7d5dd37f-c1e0-4701-85bb-3c8397fdd796",
                  "parentUUID": "8b5fba32-2e86-4a27-97c4-3017c9937883",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check that new Date-object with valid date as a parameter is a valid date",
                  "fullTitle": "isDate date objects check that new Date-object with valid date as a parameter is a valid date",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(new Date(\"11.11.21\"))).to.equal(true)",
                  "err": {},
                  "uuid": "5cd5fc89-e247-4c18-b527-33ae7dc2f41b",
                  "parentUUID": "8b5fba32-2e86-4a27-97c4-3017c9937883",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7d5dd37f-c1e0-4701-85bb-3c8397fdd796",
                "5cd5fc89-e247-4c18-b527-33ae7dc2f41b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "b465e2a8-9429-4651-844a-5a067a1a2895",
              "title": "not valid date objects",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/isDate.test.js",
              "file": "/test/isDate.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "check if a date object with invalid date is a valid date object",
                  "fullTitle": "isDate not valid date objects check if a date object with invalid date is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(new Date(\"13.13.21\"))).to.equal(false)",
                  "err": {
                    "message": "AssertionError: expected true to equal false",
                    "estack": "AssertionError: expected true to equal false\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/isDate.test.js:37:53)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": "- true\n+ false\n"
                  },
                  "uuid": "76dd95f8-bf13-41cd-ab14-829e20ce5549",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if a string with valid date is a valid date object",
                  "fullTitle": "isDate not valid date objects check if a string with valid date is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(\"11.11.21\")).to.equal(false)",
                  "err": {},
                  "uuid": "6bdbd4b3-a9fd-4769-b393-80cb31fd5433",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if a string representation of a date-object is a valid date object",
                  "fullTitle": "isDate not valid date objects check if a string representation of a date-object is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(\"Fri Dec 03 2021 12:58:21 GMT+0200 (Itä-Euroopan normaaliaika)\")).to.equal(false)",
                  "err": {},
                  "uuid": "c15024c0-53be-42a5-8fa2-2a84d0858fda",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if an integer is a valid date object",
                  "fullTitle": "isDate not valid date objects check if an integer is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(1)).to.equal(false)",
                  "err": {},
                  "uuid": "d943c3dd-da2d-4b38-82a2-dc505d971925",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if zero is a valid date object",
                  "fullTitle": "isDate not valid date objects check if zero is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(0)).to.equal(false)",
                  "err": {},
                  "uuid": "4e261a83-ed8c-4b20-88ce-db5c4b0cab8d",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if a decimal number is a valid date object",
                  "fullTitle": "isDate not valid date objects check if a decimal number is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(0.00067)).to.equal(false)",
                  "err": {},
                  "uuid": "bbcf9244-d0c4-44c0-a0a8-3501ae417789",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if negative integer is a valid date object",
                  "fullTitle": "isDate not valid date objects check if negative integer is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(-666)).to.equal(false)",
                  "err": {},
                  "uuid": "74ca116e-2138-4b12-9ab6-42fd25c7a2bf",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if null is a valid date object",
                  "fullTitle": "isDate not valid date objects check if null is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(null)).to.equal(false)",
                  "err": {},
                  "uuid": "32b87cdc-ee55-40b3-800c-664b1899b72e",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if boolean value is a valid date object",
                  "fullTitle": "isDate not valid date objects check if boolean value is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(true)).to.equal(false)",
                  "err": {},
                  "uuid": "5fe3a05c-8568-48c1-a745-8683999e8dea",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "check if an empty value is a valid date object",
                  "fullTitle": "isDate not valid date objects check if an empty value is a valid date object",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(isDate(true)).to.equal(false)",
                  "err": {},
                  "uuid": "9fbada9f-fcc3-4845-902a-7e0f0e608e25",
                  "parentUUID": "b465e2a8-9429-4651-844a-5a067a1a2895",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6bdbd4b3-a9fd-4769-b393-80cb31fd5433",
                "c15024c0-53be-42a5-8fa2-2a84d0858fda",
                "d943c3dd-da2d-4b38-82a2-dc505d971925",
                "4e261a83-ed8c-4b20-88ce-db5c4b0cab8d",
                "bbcf9244-d0c4-44c0-a0a8-3501ae417789",
                "74ca116e-2138-4b12-9ab6-42fd25c7a2bf",
                "32b87cdc-ee55-40b3-800c-664b1899b72e",
                "5fe3a05c-8568-48c1-a745-8683999e8dea",
                "9fbada9f-fcc3-4845-902a-7e0f0e608e25"
              ],
              "failures": [
                "76dd95f8-bf13-41cd-ab14-829e20ce5549"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d8facd6c-862a-4c55-911a-69ce07e8b270",
          "title": "isEmpty",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/isEmpty.test.js",
          "file": "/test/isEmpty.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "check if an object is empty",
              "fullTitle": "isEmpty check if an object is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty({})).to.equal(true)",
              "err": {},
              "uuid": "6fd246b9-bf69-44e6-b4ab-f7db841a919a",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if an object is not empty",
              "fullTitle": "isEmpty check if an object is not empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(\"text\")).to.equal(false)",
              "err": {},
              "uuid": "de06fd19-6505-4327-970d-b09881fcadc4",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if an object is null",
              "fullTitle": "isEmpty check if an object is null",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(null)).to.equal(true)",
              "err": {},
              "uuid": "11a8b908-33cf-49b8-ab5f-38ae62070d05",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if an empty sting is empty",
              "fullTitle": "isEmpty check if an empty sting is empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(\"\")).to.equal(true)",
              "err": {},
              "uuid": "045228a1-ecc4-4603-92a6-90ebdbf26421",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if an string is not empty",
              "fullTitle": "isEmpty check if an string is not empty",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty(\" \")).to.equal(false)",
              "err": {},
              "uuid": "27741094-4b58-4991-903d-3cc63b3bb6df",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "check if all is gone",
              "fullTitle": "isEmpty check if all is gone",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(isEmpty()).to.equal(true)",
              "err": {},
              "uuid": "acbfb2b6-da10-4291-82e2-a6df3b26a052",
              "parentUUID": "d8facd6c-862a-4c55-911a-69ce07e8b270",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6fd246b9-bf69-44e6-b4ab-f7db841a919a",
            "de06fd19-6505-4327-970d-b09881fcadc4",
            "11a8b908-33cf-49b8-ab5f-38ae62070d05",
            "045228a1-ecc4-4603-92a6-90ebdbf26421",
            "27741094-4b58-4991-903d-3cc63b3bb6df",
            "acbfb2b6-da10-4291-82e2-a6df3b26a052"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "53861ab3-b7e1-4455-9fe6-50260643fa2e",
          "title": "toInteger",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js",
          "file": "/test/toInteger.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
              "title": "basic values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js",
              "file": "/test/toInteger.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of a positive integer into integer",
                  "fullTitle": "toInteger basic values change a string representation of a positive integer into integer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"10\")).to.equal(10)",
                  "err": {},
                  "uuid": "6a566c7e-1bc3-4fdb-b661-124f3c566730",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a negative integer into integer",
                  "fullTitle": "toInteger basic values change a string representation of a negative integer into integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"-10\")).to.equal(-10)",
                  "err": {},
                  "uuid": "fff917ca-270e-4744-8c8a-63f5253d0e31",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a positive decimal number into integer",
                  "fullTitle": "toInteger basic values change a string representation of a positive decimal number into integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"0.10\")).to.equal(0)",
                  "err": {},
                  "uuid": "72b6b67c-2c96-48a6-9a6a-555cab90c95d",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a negative decimal number into integer",
                  "fullTitle": "toInteger basic values change a string representation of a negative decimal number into integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"-0.10\")).to.equal(0)",
                  "err": {},
                  "uuid": "6f7d50a7-34b6-4bb0-8d93-ee07f963a001",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of zero into integer",
                  "fullTitle": "toInteger basic values change a string representation of zero into integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"0\")).to.equal(0)",
                  "err": {},
                  "uuid": "654f762f-0232-4f81-98f1-feb87e293f72",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an empty string to an integer (0)",
                  "fullTitle": "toInteger basic values change an empty string to an integer (0)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"\")).to.equal(0)",
                  "err": {},
                  "uuid": "334d5e2c-fb42-4373-b326-64b9cf535925",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a boolean value to an integer",
                  "fullTitle": "toInteger basic values change a boolean value to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(true)).to.equal(1)",
                  "err": {},
                  "uuid": "718e8e86-f83b-4a2f-8660-18e3b5de77f0",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a number to an integer",
                  "fullTitle": "toInteger basic values change a number to an integer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(1.1)).to.equal(1)",
                  "err": {},
                  "uuid": "41687fd8-df4e-493b-9ab0-0054ed348e04",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an octal number to an integer",
                  "fullTitle": "toInteger basic values change an octal number to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(0o010)).to.equal(8)",
                  "err": {},
                  "uuid": "af4f3565-d27b-47a5-9b58-5c15156e17ba",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a binary number to an integer",
                  "fullTitle": "toInteger basic values change a binary number to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(0b010)).to.equal(2)",
                  "err": {},
                  "uuid": "0fafe998-8e8f-4aa8-9e20-a8c1f8bdb029",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a hexal number to an integer",
                  "fullTitle": "toInteger basic values change a hexal number to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(0x010)).to.equal(16)",
                  "err": {},
                  "uuid": "1043f58d-90e7-4149-a4fc-566a6a73fce9",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change symbol to an integer",
                  "fullTitle": "toInteger basic values change symbol to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(Symbol())).to.equal(0)",
                  "err": {},
                  "uuid": "f3cf327b-3e1f-4405-8ead-ec0dfc30e4d7",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change no value at all to an integer",
                  "fullTitle": "toInteger basic values change no value at all to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger()).to.equal(0)",
                  "err": {},
                  "uuid": "42158fe1-6096-4e0a-ab8e-7049fbca482f",
                  "parentUUID": "6b032f07-ae39-44a7-a1dd-f369b63b7ba5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "6a566c7e-1bc3-4fdb-b661-124f3c566730",
                "fff917ca-270e-4744-8c8a-63f5253d0e31",
                "72b6b67c-2c96-48a6-9a6a-555cab90c95d",
                "6f7d50a7-34b6-4bb0-8d93-ee07f963a001",
                "654f762f-0232-4f81-98f1-feb87e293f72",
                "334d5e2c-fb42-4373-b326-64b9cf535925",
                "718e8e86-f83b-4a2f-8660-18e3b5de77f0",
                "41687fd8-df4e-493b-9ab0-0054ed348e04",
                "af4f3565-d27b-47a5-9b58-5c15156e17ba",
                "0fafe998-8e8f-4aa8-9e20-a8c1f8bdb029",
                "1043f58d-90e7-4149-a4fc-566a6a73fce9",
                "f3cf327b-3e1f-4405-8ead-ec0dfc30e4d7",
                "42158fe1-6096-4e0a-ab8e-7049fbca482f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
              "title": "accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js",
              "file": "/test/toInteger.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER to an integer",
                  "fullTitle": "toInteger accepted limit values change a string representation of MAX_SAFE_INTEGER to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"9007199254740991\")).to.equal(Number.MAX_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "879780cc-17b6-4abc-836c-99494a3cb84d",
                  "parentUUID": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER-1 to an integer",
                  "fullTitle": "toInteger accepted limit values change a string representation of MAX_SAFE_INTEGER-1 to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"9007199254740990\")).to.equal(Number.MAX_SAFE_INTEGER-1)",
                  "err": {},
                  "uuid": "5c796776-c941-481f-8d33-4190e4f82ba8",
                  "parentUUID": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER to an integer",
                  "fullTitle": "toInteger accepted limit values change a string representation of MIN_SAFE_INTEGER to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"-9007199254740991\")).to.equal(Number.MIN_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "cd598f22-8719-400f-8245-99cc5c68440d",
                  "parentUUID": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER+1 to an integer",
                  "fullTitle": "toInteger accepted limit values change a string representation of MIN_SAFE_INTEGER+1 to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"-9007199254740990\")).to.equal(Number.MIN_SAFE_INTEGER+1)",
                  "err": {},
                  "uuid": "412e40e0-78dc-424b-8953-c6e3df0319a3",
                  "parentUUID": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_VALUE to a integer",
                  "fullTitle": "toInteger accepted limit values change a string representation of MIN_VALUE to a integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"0.0000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"00000000000005\")).to.equal(0)",
                  "err": {},
                  "uuid": "39d16fd7-e7e8-45d3-9ae3-91c70b51ec59",
                  "parentUUID": "a7a2e6db-0514-4316-a027-2b0f2b2e457c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "879780cc-17b6-4abc-836c-99494a3cb84d",
                "5c796776-c941-481f-8d33-4190e4f82ba8",
                "cd598f22-8719-400f-8245-99cc5c68440d",
                "412e40e0-78dc-424b-8953-c6e3df0319a3",
                "39d16fd7-e7e8-45d3-9ae3-91c70b51ec59"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "79c3bc63-de72-4736-99ca-16f012edb5fc",
              "title": "not accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js",
              "file": "/test/toInteger.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER+1 to an integer",
                  "fullTitle": "toInteger not accepted limit values change a string representation of MAX_SAFE_INTEGER+1 to an integer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => toInteger(\"9007199254740992\")).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js:99:65)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "edab5990-8739-4d9b-abcc-5fa6bfdd8dd2",
                  "parentUUID": "79c3bc63-de72-4736-99ca-16f012edb5fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER-1 to an integer",
                  "fullTitle": "toInteger not accepted limit values change a string representation of MIN_SAFE_INTEGER-1 to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => toInteger(\"-9007199254740992\")).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js:102:66)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "422318a6-f4ed-4ebc-ac19-c1e1e4be3eac",
                  "parentUUID": "79c3bc63-de72-4736-99ca-16f012edb5fc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of less than MIN_VALUE to an integer",
                  "fullTitle": "toInteger not accepted limit values change a string representation of less than MIN_VALUE to an integer",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toInteger(\"0.0000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000005\")).to.equal(0)",
                  "err": {},
                  "uuid": "a3b0b6a6-61eb-4473-ada3-c7ee74a035d7",
                  "parentUUID": "79c3bc63-de72-4736-99ca-16f012edb5fc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a3b0b6a6-61eb-4473-ada3-c7ee74a035d7"
              ],
              "failures": [
                "edab5990-8739-4d9b-abcc-5fa6bfdd8dd2",
                "422318a6-f4ed-4ebc-ac19-c1e1e4be3eac"
              ],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "979da49a-15c9-4b7b-be92-7beaea9ea124",
              "title": "not accepted values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js",
              "file": "/test/toInteger.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string with no numbers to an integer",
                  "fullTitle": "toInteger not accepted values change a string with no numbers to an integer",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(()=>toInteger(\"tässäpä ei ole laisinkaan numeroita!\")).to.throw(TypeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw TypeError",
                    "estack": "AssertionError: expected [Function] to throw TypeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/toInteger.test.js:119:83)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "671b0572-17eb-40fa-9f7d-421650d59a05",
                  "parentUUID": "979da49a-15c9-4b7b-be92-7beaea9ea124",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [],
              "failures": [
                "671b0572-17eb-40fa-9f7d-421650d59a05"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "497d42e4-594f-47ad-b82c-c1727bc58b36",
          "title": "toNumber",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js",
          "file": "/test/toNumber.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
              "title": "basic values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js",
              "file": "/test/toNumber.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of a positive integer into number",
                  "fullTitle": "toNumber basic values change a string representation of a positive integer into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"10\")).to.equal(10)",
                  "err": {},
                  "uuid": "8b25dfe4-5a16-461b-965a-68de9d6f3dad",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a negative integer into number",
                  "fullTitle": "toNumber basic values change a string representation of a negative integer into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"-10\")).to.equal(-10)",
                  "err": {},
                  "uuid": "47a7048b-7cec-4aba-9791-645f8509bdd3",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a positive decimal number into number",
                  "fullTitle": "toNumber basic values change a string representation of a positive decimal number into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"0.10\")).to.equal(0.10)",
                  "err": {},
                  "uuid": "c0aa6950-f2d3-4730-b60e-e44667f87e30",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of a negative decimal number into number",
                  "fullTitle": "toNumber basic values change a string representation of a negative decimal number into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"-0.10\")).to.equal(-0.10)",
                  "err": {},
                  "uuid": "ec5ac9fb-e178-4b06-8482-72dec26cf34c",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of zero into number",
                  "fullTitle": "toNumber basic values change a string representation of zero into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"0\")).to.equal(0)",
                  "err": {},
                  "uuid": "a4fa6c64-7e3c-4014-83f2-023cb61ff98a",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an empty string to a number (0)",
                  "fullTitle": "toNumber basic values change an empty string to a number (0)",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"\")).to.equal(0)",
                  "err": {},
                  "uuid": "8befe315-02e0-4eb6-a52a-fabc4ebae366",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a boolean value to a number",
                  "fullTitle": "toNumber basic values change a boolean value to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(true)).to.equal(1)",
                  "err": {},
                  "uuid": "7c14a8d4-ea78-4299-ab43-011893c92a91",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a number to a number",
                  "fullTitle": "toNumber basic values change a number to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(1.1)).to.equal(1.1)",
                  "err": {},
                  "uuid": "183a6d1f-96a8-4304-a003-47c830f0658d",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an octal number to a number",
                  "fullTitle": "toNumber basic values change an octal number to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber('0o010')).to.equal(8)",
                  "err": {},
                  "uuid": "978bac07-3098-48f7-9559-8135b24ea6ce",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a binary number to a number",
                  "fullTitle": "toNumber basic values change a binary number to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber('0b010')).to.equal(2)",
                  "err": {},
                  "uuid": "fd342cb5-96bd-47f8-8074-fae4c4d6aef0",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a hexal number to a number",
                  "fullTitle": "toNumber basic values change a hexal number to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber('0x010')).to.equal(16)",
                  "err": {},
                  "uuid": "5979aeef-94e5-49b6-a38d-ed8082bcec1f",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change Number-object into number",
                  "fullTitle": "toNumber basic values change Number-object into number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(Number)).to.deep.equal(NaN)",
                  "err": {},
                  "uuid": "4c75e860-8aa0-477d-bd91-c1581fb7dcfa",
                  "parentUUID": "934263fc-24fb-49ca-8ab1-ada04c0edd3c",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8b25dfe4-5a16-461b-965a-68de9d6f3dad",
                "47a7048b-7cec-4aba-9791-645f8509bdd3",
                "c0aa6950-f2d3-4730-b60e-e44667f87e30",
                "ec5ac9fb-e178-4b06-8482-72dec26cf34c",
                "a4fa6c64-7e3c-4014-83f2-023cb61ff98a",
                "8befe315-02e0-4eb6-a52a-fabc4ebae366",
                "7c14a8d4-ea78-4299-ab43-011893c92a91",
                "183a6d1f-96a8-4304-a003-47c830f0658d",
                "978bac07-3098-48f7-9559-8135b24ea6ce",
                "fd342cb5-96bd-47f8-8074-fae4c4d6aef0",
                "5979aeef-94e5-49b6-a38d-ed8082bcec1f",
                "4c75e860-8aa0-477d-bd91-c1581fb7dcfa"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
              "title": "accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js",
              "file": "/test/toNumber.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER to a number",
                  "fullTitle": "toNumber accepted limit values change a string representation of MAX_SAFE_INTEGER to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"9007199254740991\")).to.equal(Number.MAX_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "0fcb3981-c625-462d-82d6-0a9f136125dd",
                  "parentUUID": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER-1 to a number",
                  "fullTitle": "toNumber accepted limit values change a string representation of MAX_SAFE_INTEGER-1 to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"9007199254740990\")).to.equal(Number.MAX_SAFE_INTEGER-1)",
                  "err": {},
                  "uuid": "7fc0783d-9e16-4b4e-b539-e6d593036e10",
                  "parentUUID": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER to a number",
                  "fullTitle": "toNumber accepted limit values change a string representation of MIN_SAFE_INTEGER to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"-9007199254740991\")).to.equal(Number.MIN_SAFE_INTEGER)",
                  "err": {},
                  "uuid": "b09285f7-b046-4679-9a97-f527022284de",
                  "parentUUID": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER+1 to a number",
                  "fullTitle": "toNumber accepted limit values change a string representation of MIN_SAFE_INTEGER+1 to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"-9007199254740990\")).to.equal(Number.MIN_SAFE_INTEGER+1)",
                  "err": {},
                  "uuid": "cb4785e5-e835-4a2b-b776-835aafd6900a",
                  "parentUUID": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_VALUE to a number",
                  "fullTitle": "toNumber accepted limit values change a string representation of MIN_VALUE to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"0.0000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"00000000000005\")).to.equal(Number.MIN_VALUE)",
                  "err": {},
                  "uuid": "abb8db5f-1115-4a36-9e8e-c3d7c0870595",
                  "parentUUID": "d82c6a9c-6d95-49e8-bb0f-acd43cc50786",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "0fcb3981-c625-462d-82d6-0a9f136125dd",
                "7fc0783d-9e16-4b4e-b539-e6d593036e10",
                "b09285f7-b046-4679-9a97-f527022284de",
                "cb4785e5-e835-4a2b-b776-835aafd6900a",
                "abb8db5f-1115-4a36-9e8e-c3d7c0870595"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0c72afec-fa84-46f7-828e-93a5ee368e09",
              "title": "not accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js",
              "file": "/test/toNumber.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string representation of MAX_SAFE_INTEGER+1 to a number",
                  "fullTitle": "toNumber not accepted limit values change a string representation of MAX_SAFE_INTEGER+1 to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => toNumber(\"9007199254740992\")).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js:101:64)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "0763d7a2-2389-4d93-ad67-48a396eb1817",
                  "parentUUID": "0c72afec-fa84-46f7-828e-93a5ee368e09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of MIN_SAFE_INTEGER-1 to a number",
                  "fullTitle": "toNumber not accepted limit values change a string representation of MIN_SAFE_INTEGER-1 to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "expect(() => toNumber(\"-9007199254740992\")).to.throw(RangeError)",
                  "err": {
                    "message": "AssertionError: expected [Function] to throw RangeError",
                    "estack": "AssertionError: expected [Function] to throw RangeError\n    at Context.<anonymous> (file:///Users/tapanioma/Documents/Software%20testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js:104:65)\n    at processImmediate (node:internal/timers:464:21)",
                    "diff": null
                  },
                  "uuid": "42e5d04c-c93a-466b-aeaf-96eb50808819",
                  "parentUUID": "0c72afec-fa84-46f7-828e-93a5ee368e09",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a string representation of less than MIN_VALUE to a number",
                  "fullTitle": "toNumber not accepted limit values change a string representation of less than MIN_VALUE to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"0.0000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000000000000000000000000000000\"+\n                \"000000000000005\")).to.equal(0)",
                  "err": {},
                  "uuid": "fcb4f9e7-1921-4971-bfb6-392f26d4379f",
                  "parentUUID": "0c72afec-fa84-46f7-828e-93a5ee368e09",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "fcb4f9e7-1921-4971-bfb6-392f26d4379f"
              ],
              "failures": [
                "0763d7a2-2389-4d93-ad67-48a396eb1817",
                "42e5d04c-c93a-466b-aeaf-96eb50808819"
              ],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "37c18a2d-d91b-410c-ae6c-37a9a1d11450",
              "title": "not accepted values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toNumber.test.js",
              "file": "/test/toNumber.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a string with no numbers to a number",
                  "fullTitle": "toNumber not accepted values change a string with no numbers to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(\"tässäpä ei ole laisinkaan numeroita!\")).to.deep.equal(NaN)",
                  "err": {},
                  "uuid": "a7cb6b84-2563-49ea-b33d-45a4404cd839",
                  "parentUUID": "37c18a2d-d91b-410c-ae6c-37a9a1d11450",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change no value at all to a number",
                  "fullTitle": "toNumber not accepted values change no value at all to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber()).to.deep.equal(NaN)",
                  "err": {},
                  "uuid": "02182980-0943-4993-b31c-3490b20e60c2",
                  "parentUUID": "37c18a2d-d91b-410c-ae6c-37a9a1d11450",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change symbol to a number",
                  "fullTitle": "toNumber not accepted values change symbol to a number",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toNumber(Symbol())).to.deep.equal(NaN)",
                  "err": {},
                  "uuid": "b8182ea2-0a58-4ba9-9a99-5e33b9cc8bc5",
                  "parentUUID": "37c18a2d-d91b-410c-ae6c-37a9a1d11450",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a7cb6b84-2563-49ea-b33d-45a4404cd839",
                "02182980-0943-4993-b31c-3490b20e60c2",
                "b8182ea2-0a58-4ba9-9a99-5e33b9cc8bc5"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "886f7059-4cad-4e2a-ab2e-fbc5066b2467",
          "title": "toString",
          "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toString.test.js",
          "file": "/test/toString.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [],
          "suites": [
            {
              "uuid": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
              "title": "basic values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toString.test.js",
              "file": "/test/toString.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change a positive integer into its string representation",
                  "fullTitle": "toString basic values change a positive integer into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(10)).to.equal(\"10\")",
                  "err": {},
                  "uuid": "be741821-c23b-45bf-aebc-bd99d58bc596",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a negative integer into its string representation",
                  "fullTitle": "toString basic values change a negative integer into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(-210)).to.equal(\"-210\")",
                  "err": {},
                  "uuid": "f11c3d2f-294f-400d-97ff-de6616564d2f",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a negative decimal number into its string representation",
                  "fullTitle": "toString basic values change a negative decimal number into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(-210.0006)).to.equal(\"-210.0006\")",
                  "err": {},
                  "uuid": "558f2343-4c05-4b29-b3a3-bf672cbf4d0d",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a positive decimal number into its string representation",
                  "fullTitle": "toString basic values change a positive decimal number into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(20.0006)).to.equal(\"20.0006\")",
                  "err": {},
                  "uuid": "19c0b662-a6ea-4ab9-ba16-2363b1d4a0cc",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change zero into its string representation",
                  "fullTitle": "toString basic values change zero into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(0)).to.equal(\"0\")",
                  "err": {},
                  "uuid": "b7e674a4-25bf-4e6f-80de-988ede9d4a76",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an array into its string representation",
                  "fullTitle": "toString basic values change an array into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString([0,1,2,3,4])).to.equal(\"0,1,2,3,4\")",
                  "err": {},
                  "uuid": "90e605d6-6861-4774-9bd0-4f552f5d4c49",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an object into its string representation",
                  "fullTitle": "toString basic values change an object into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString({\"jee\":\"jee\"})).to.equal(\"[object Object]\")",
                  "err": {},
                  "uuid": "3b94a03a-d30b-4a58-9ac7-3db4fb4a27d3",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a symbol into its string representation",
                  "fullTitle": "toString basic values change a symbol into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(Symbol())).to.equal(\"Symbol()\")",
                  "err": {},
                  "uuid": "65b99497-5989-4955-88fc-cbf601c396e7",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a hexal number into its string representation",
                  "fullTitle": "toString basic values change a hexal number into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(0x010)).to.equal(\"16\")",
                  "err": {},
                  "uuid": "e577e686-ecf0-4858-a2cf-399a912e859e",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change a binary number into its string representation",
                  "fullTitle": "toString basic values change a binary number into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(0b010)).to.equal(\"2\")",
                  "err": {},
                  "uuid": "965bbec8-340c-401a-82fa-57112abdd07c",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change an octal number into its string representation",
                  "fullTitle": "toString basic values change an octal number into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(0o010)).to.equal(\"8\")",
                  "err": {},
                  "uuid": "320619e9-f23f-4559-ae54-fbe811d7270d",
                  "parentUUID": "9a166b0c-71b4-4fe6-940f-4d14f4536768",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "be741821-c23b-45bf-aebc-bd99d58bc596",
                "f11c3d2f-294f-400d-97ff-de6616564d2f",
                "558f2343-4c05-4b29-b3a3-bf672cbf4d0d",
                "19c0b662-a6ea-4ab9-ba16-2363b1d4a0cc",
                "b7e674a4-25bf-4e6f-80de-988ede9d4a76",
                "90e605d6-6861-4774-9bd0-4f552f5d4c49",
                "3b94a03a-d30b-4a58-9ac7-3db4fb4a27d3",
                "65b99497-5989-4955-88fc-cbf601c396e7",
                "e577e686-ecf0-4858-a2cf-399a912e859e",
                "965bbec8-340c-401a-82fa-57112abdd07c",
                "320619e9-f23f-4559-ae54-fbe811d7270d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "0222867b-0133-4fb1-a7b4-8aba2888124d",
              "title": "accepted limit values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toString.test.js",
              "file": "/test/toString.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change MAX_SAFE_INTEGER into its string representation",
                  "fullTitle": "toString accepted limit values change MAX_SAFE_INTEGER into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(Number.MAX_SAFE_INTEGER)).to.equal(\"9007199254740991\")",
                  "err": {},
                  "uuid": "9620b4ba-2370-4646-a017-304f94e848a5",
                  "parentUUID": "0222867b-0133-4fb1-a7b4-8aba2888124d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change MIN_SAFE_INTEGER into its string representation",
                  "fullTitle": "toString accepted limit values change MIN_SAFE_INTEGER into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(Number.MIN_SAFE_INTEGER)).to.equal(\"-9007199254740991\")",
                  "err": {},
                  "uuid": "69b5ed05-764b-4da0-b9e6-9e86bc3954c9",
                  "parentUUID": "0222867b-0133-4fb1-a7b4-8aba2888124d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "change MIN_VALUE into its string representation",
                  "fullTitle": "toString accepted limit values change MIN_VALUE into its string representation",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString(Number.MIN_VALUE)).to.equal(\"5e-324\")",
                  "err": {},
                  "uuid": "a1807353-8c9c-45be-b2db-1b27de957acb",
                  "parentUUID": "0222867b-0133-4fb1-a7b4-8aba2888124d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "9620b4ba-2370-4646-a017-304f94e848a5",
                "69b5ed05-764b-4da0-b9e6-9e86bc3954c9",
                "a1807353-8c9c-45be-b2db-1b27de957acb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            },
            {
              "uuid": "4a94f4b7-9557-4874-8957-9c42b4a84ec6",
              "title": "not accepted values",
              "fullFile": "/Users/tapanioma/Documents/Software testing/COMP.SE.200-2021-2022-1/test/toString.test.js",
              "file": "/test/toString.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "change nothing into string",
                  "fullTitle": "toString not accepted values change nothing into string",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "expect(toString()).to.equal(\"undefined\")",
                  "err": {},
                  "uuid": "308e1a8d-d835-4a9c-b12b-b00b583985d0",
                  "parentUUID": "4a94f4b7-9557-4874-8957-9c42b4a84ec6",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "308e1a8d-d835-4a9c-b12b-b00b583985d0"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 2000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.0.1"
    },
    "marge": {
      "options": null,
      "version": "6.0.1"
    }
  }
}